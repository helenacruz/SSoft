package tecnico.ssoft.phpsat.core;

import java.util.List;
import java.util.ArrayList;

public abstract class Vulnerability
{
    private List<String> entryPoints;
    private List<String> sanitizationFunctions;
    private List<String> sinks;

    public Vulnerability()
    {
        entryPoints = new ArrayList<String>();
        sanitizationFunctions = new ArrayList<String>();
        sinks = new ArrayList<String>();
    }

    public Vulnerability(List<String> entryPoints, List<String> sanitizationFunctions, List<String> sinks)
    {
        this.entryPoints = entryPoints;
        this.sanitizationFunctions = sanitizationFunctions;
        this.sinks = sinks;
    }

    public List<String> getEntryPoints()
    {
        return entryPoints;
    }

    public List<String> getSanitizationFunctions()
    {
        return sanitizationFunctions;
    }

    public List<String> getSinks()
    {
        return sinks;
    }

    public void setEntryPoints(List<String> entryPoints)
    {
        this.entryPoints = entryPoints;
    }

    public void setSanitizationFunctions(List<String> sanitizationFunctions)
    {
        this.sanitizationFunctions = sanitizationFunctions;
    }

    public void setSinks(List<String> sinks)
    {
        this.sinks = sinks;
    }

    public void addEntryPoint(String entryPoint)
    {
        entryPoints.add(entryPoint);
    }

    public void addSanitizationFunction(String sanitizationFunction)
    {
        sanitizationFunctions.add(sanitizationFunction);
    }

    public void addSink(String sink)
    {
        sinks.add(sink);
    }

    public abstract String type(); // type of vulnerability

    @Override
    public String toString()
    {
        return entryPointsToString() + "\n" + sanitizationFunctionsToString() + "\n" + sinksToString();
    }

    public String entryPointsToString()
    {
        return listToString(entryPoints);
    }

    public String sanitizationFunctionsToString()
    {
        return listToString(sanitizationFunctions);
    }

    public String sinksToString()
    {
        return listToString(sinks);
    }

    public String listToString(List<String> list)
    {
        String res = "";

        for (String s : list) {
            res += s + ",";
        }

        return res.substring(0, res.length() - 1); // deletes the last ,
    }
}
